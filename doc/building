Building the engine and toolchain:
The build_engine.sh will do that for you. It will still ask you to have at least
a certain amount of dependencies installed (such as the GCC, make and the X/SDL
headers for your operating system.

Building the editor:
Handled by build_editor.sh, this will require the GCC9. It currently does not
build on GCC10.
GTK2, Pango, GTKGLEXT and MiniZip are one of a few other main dependencies.

Building the game-logic:
Once build_engine.sh has been executed, you can now build the source tree with
build_game.sh. It'll use the fteqcc binary that's in the ./bin/ directory.

Old, manual build instructions:
================================================================================

1. Building all of the game-logic

To build the game-logic for all games, issue 'make' inside the src/
directory of the repository. This requires you to have the latest
fteqcc installed.

2. Building a specific game or mod

For that you'll have to navigate into the client and server directory
of the game you want to compile. For example if you're only wanting to
build the Half-Life game-logic, navigate into src/client/valve, issue
'make' there, then do the same inside src/server/valve.

3. Building the engine

The engine is not part of this project.
However, as of this writing, building the engine is simple.
Checkout/Clone the FTEQW engine repository, then navigate into the
engine/ sub-directory and issue 'make m-rel' there.
This will generate a 'fteqw' binary for your platform in the sub-directory
titled 'release'.

3. Building fteqcc

Issue 'make qcc-rel' in the FTEQW repository folder 'engine', like in 3.
It will generate an fteqcc binary inside the sub-directory 'release'.

4. Misc notes

To those not in the know, the game-logic is written in QuakeC, it is thus
platform and architecture independent. You do not need to rebuild the logic
for each and every platform. The result will be identical.
